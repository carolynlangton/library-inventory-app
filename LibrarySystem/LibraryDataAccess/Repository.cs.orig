using System;
using System.Collections.Generic;
using LibraryEngine;

namespace LibraryDataAccess
{
    /// <summary>
    /// The class that represents a database.
    /// </summary>
    public class Repository
    {
        /// <summary>
        /// The database's list of authors.
        /// </summary>
        private readonly List<Author> authors = new List<Author>();

        /// <summary>
        /// The database's list of books.
        /// </summary>
        private readonly List<Book> books = new List<Book>();

        /// <summary>
        /// The database's list of copies.
        /// </summary>
        private readonly List<BookCopy> copies = new List<BookCopy>();

        /// <summary>
        /// The database's list of book formats.
        /// </summary>
        private readonly List<Format> formats = new List<Format>();

        /// <summary>
        /// The database's list of genres.
        /// </summary>
        private readonly List<Genre> genres = new List<Genre>();

        /// The database's list of publishers.
        /// </summary>
        private readonly List<Publisher> publishers = new List<Publisher>();

        /// <summary>
        /// The database's list of members.
        /// </summary>
        private readonly List<Member> members = new List<Member>();

        /// <summary>
        /// The database's list of transactions.
        /// </summary>
        private readonly List<Transaction> transactions = new List<Transaction>();

        /// <summary>
        /// Handles the event of an author being added.
        /// </summary>
        public event EventHandler<AuthorEventArgs> AuthorAdded;

        /// <summary>
        /// Handles the event of a book being added.
        /// </summary>
        public event EventHandler<BookEventArgs> BookAdded;

        /// <summary>
        /// Handles the event of a copy being added.
        /// </summary>
        public event EventHandler<BookCopyEventArgs> CopyAdded;

        /// <summary>
        /// Handles the event of a book format being added.
        /// </summary>
        public event EventHandler<FormatEventArgs> FormatAdded;

        /// <summary>
        /// Handles the event of a genre being added.
        /// </summary>
        public event EventHandler<GenreEventArgs> GenreAdded;

        /// <summary>
        /// Handles the event of a transaction being added.
        /// </summary>
        public event EventHandler<TransactionEventArgs> TransactionAdded;

        /// <summary>
        /// Handles the event of a publisher being added.
        /// </summary>
        public event EventHandler<PublisherEventArgs> PublisherAdded;

        /// <summary>
        /// Handles the event of a member being added.
        /// </summary>
        public event EventHandler<MemberEventArgs> MemberAdded;

        /// Adds an author.
        /// </summary>
        /// <param name="author">The author to add.</param>
        public void AddAuthor(Author author)
        {
            // Prevents the same object from being added repeatedly
            if (!this.authors.Contains(author))
            {
                this.authors.Add(author);

                if (this.AuthorAdded != null)
                {
                    this.AuthorAdded(this, new AuthorEventArgs(author));
                }
            }
        }

        /// <summary>
        /// Adds a book.
        /// </summary>
        /// <param name="book">The book to add.</param>
        public void AddBook(Book book)
        {
            // Prevents the same object from being added repeatedly
            if (!this.books.Contains(book))
            {
                this.books.Add(book);

                if (this.BookAdded != null)
                {
                    this.BookAdded(this, new BookEventArgs(book));
                }
            }
        }

        /// <summary>
        /// Adds a member.
        /// </summary>
        /// <param name="member">The member to add.</param>
        public void AddMember(Member member)
        {
            // Prevents the same object from being added repeatedly
            if (!this.members.Contains(member))
            {
                this.members.Add(member);

                if (this.MemberAdded != null)
                {
                    this.MemberAdded(this, new MemberEventArgs(member));
                }
            }
        }

        /// <summary>
        /// Adds a publisher.
        /// </summary>
        /// <param name="publisher">The publisher to add.</param>
        public void AddPublisher(Publisher publisher)
        {
            // Prevents the same object from being added repeatedly
            if (!this.publishers.Contains(publisher))
            {
                this.publishers.Add(publisher);

                if (this.PublisherAdded != null)
                {
                    this.PublisherAdded(this, new PublisherEventArgs(publisher));
                }
            }
        }

        /// <summary>
        /// Adds a copy of a book.
        /// </summary>
        /// <param name="copy">The copy to add.</param>
        public void AddCopy(BookCopy copy)
        {
            // TODO: Determine if this check is necessary (if we want to add more than one of the same copy)
            if (!this.copies.Contains(copy))
            {
                this.copies.Add(copy);

                if (this.CopyAdded != null)
                {
                    this.CopyAdded(this, new BookCopyEventArgs(copy));
                }
            }
        }

        /// <summary>
        /// Adds a book format.
        /// </summary>
        /// <param name="format">The type of format to add.</param>
        public void AddFormat(Format format)
        {
            // Prevents the same object from being added repeatedly.
            if (!this.formats.Contains(format))
            {
                this.formats.Add(format);

                if (this.FormatAdded != null)
                {
                    this.FormatAdded(this, new FormatEventArgs(format));
                }
            }
        }

        /// <summary>
        /// Adds a genre of a book.
        /// </summary>
        /// <param name="genre">The genre to add.</param>
        public void AddGenre(Genre genre)
        {
            if (!this.genres.Contains(genre))
            {
                this.genres.Add(genre);

                if (this.GenreAdded != null)
                {
                    this.GenreAdded(this, new GenreEventArgs(genre));
                }
            }
        }

        /// <summary>
        /// Adds a transaction.
        /// </summary>
        /// <param name="t">The transaction to add.</param>
        public void AddTransaction(Transaction t)
        {
            if (!this.transactions.Contains(t))
            {
                this.transactions.Add(t);

                if (this.TransactionAdded != null)
                {
                    this.TransactionAdded(this, new TransactionEventArgs(t));
                }
            }
        }

        /// <summary>
        /// Checks to see if the repository contains the specified author.
        /// </summary>
        /// <param name="author">The author to check.</param>
        /// <returns>A value indicating whether or not the author is in the repository.</returns>
        public bool ContainsAuthor(Author author)
        {
            return this.authors.Contains(author);
        }

        /// <summary>
        /// Checks to see if the repository contains the specified book.
        /// </summary>
        /// <param name="book">The book to check.</param>
        /// <returns>A value indicating whether or not the book is in the repository.</returns>
        public bool ContainsBook(Book book)
        {
            return this.books.Contains(book);
        }

        /// <summary>
        /// Checks to see if the repository contains the specified publisher.
        /// </summary>
        /// <param name="publisher">The publisher to check.</param>
        /// <returns>A value indicating whether or not the publisher is in the repository.</returns>
        public bool ContainsPublisher(Publisher publisher)
        {
            return this.publishers.Contains(publisher);
        }

        /// <summary>
        /// Checks to see if the repository contains the specified member.
        /// </summary>
        /// <param name="member">The member to check.</param>
        /// <returns>A value indicating whether or not the member is in the repository.</returns>
        public bool ContainsMember(Member member)
        {
            return this.members.Contains(member);
        }

        /// <summary>
        /// Checks to see if the repository contains the specified copy.
        /// </summary>
        /// <param name="copy">The copy to check.</param>
        /// <returns>A value indicating whether or not the copy is in the repository.</returns>
        public bool ContainsCopy(BookCopy copy)
        {
            return this.copies.Contains(copy);
        }

        /// <summary>
        /// Checks to see if the repository contains the specified format.
        /// </summary>
        /// <param name="format">The format to check.</param>
        /// <returns>A value indicating whether or not the format is in the repository.</returns>
        public bool ContainsFormat(Format format)
        {
            return this.formats.Contains(format);
        }

        /// <summary>
        /// Checks to see if the repository contains the specified genre.
        /// </summary>
        /// <param name="genre">The genre to check.</param>
        /// <returns>A value indicating whether or not the copy is in the repository.</returns>
        public bool ContainsGenre(Genre genre)
        {
            return this.genres.Contains(genre);
        }

        /// <summary>
        /// Checks to see if the repository contains the specified transaction.
        /// </summary>
        /// <param name="t">The transaction to check.</param>
        /// <returns>A value indicating whether or not the transaction is in the repository.</returns>
        public bool ContainsTransaction(Transaction t)
        {
            return this.transactions.Contains(t);
        }

        /// <summary>
        /// Gets the author with the specified last name.
        /// </summary>
        /// <param name="authorLastName">The last name of the author to find.</param>
        /// <returns>The found author.</returns>
        public Author GetAuthor(string authorLastName)
        {
            return this.authors.Find(a => a.AuthorLastName == authorLastName);
        }

        /// <summary>
        /// Gets the book with the specified title.
        /// </summary>
        /// <param name="title">The title of the book to find.</param>
        /// <returns>The found book.</returns>
        public Book GetBook(string title)
        {
            return this.books.Find(b => b.Title == title);
        }

        /// <summary>
        /// Gets the member with the specified title.
        /// </summary>
        /// <param name="firstName">The first name of the member to find.</param>
        /// <returns>The found member.</returns>
        public Member GetMember(string firstName)
        {
            return this.members.Find(m => m.FirstName == firstName);
        }

        /// <summary>
        /// Gets the publisher with the specified title.
        /// </summary>
        /// <param name="name">The first name of the publisher to find.</param>
        /// <returns>The found publisher.</returns>
        public Publisher GetPublisher(string name)
        {
            return this.publishers.Find(p => p.Name == name);
        }

        /// <summary>
        /// Gets the copy with the specified ID.
        /// </summary>
        /// <param name="id">The id of the copy to find.</param>
        /// <returns>The found copy.</returns>
        public BookCopy GetCopy(int id)
        {
            return this.copies.Find(c => c.Id == id);
        }

        /// <summary>
        /// Gets the format of books with the specified format type.
        /// </summary>
        /// <param name="format">The format to find.</param>
        /// <returns>The format type found.</returns>
        public Format GetFormat(string format)
        {
            return this.formats.Find(f => f.FormatType == format);
        }

        /// <summary>
        /// Gets the genre of books with the specified genre.
        /// </summary>
        /// <param name="genreId">The genre of the book to find.</param>
        /// <returns>The books with specified genre found.</returns>
        public Book GetGenre(int genreId)
        {
            return this.books.Find(b => b.GenreId == genreId);
        }

        /// <summary>
        /// Gets the transaction with the specified due date.
        /// </summary>
        /// <param name="dueDate">The due date of the transaction to find.</param>
        /// <returns>The found transaction.</returns>
        public Transaction GetTransaction(DateTime dueDate)
        {
            return this.transactions.Find(t => t.DueDate == dueDate);
        }

        /// <summary>
        /// Gets a list of all authors in the repository.
        /// </summary>
        /// <returns>The list of authors.</returns>
        public List<Author> GetAuthors()
        {
            return new List<Author>(this.authors);
        }

        /// <summary>
        /// Gets a list of all books in the repository.
        /// </summary>
        /// <returns>The list of books.</returns>
        public List<Book> GetBooks()
        {
            return new List<Book>(this.books);
        }

        /// <summary>
        /// Gets a copy list of all publishers in the repository.
        /// </summary>
        /// <returns>The list of publishers.</returns>
        public List<Publisher> GetPublishers()
        {
            return new List<Publisher>(this.publishers);
        }

        /// <summary>
        /// Gets a copy list of all members in the repository.
        /// </summary>
        /// <returns>The list of members.</returns>
        public List<Member> GetMembers()
        {
            return new List<Member>(this.members);
        }

        /// <summary>
        /// Gets a list of all copies in the database.
        /// </summary>
        /// <returns>The list of copies.</returns>
        public List<BookCopy> GetCopies()
        {
            return new List<BookCopy>(this.copies);
        }

        /// <summary>
        /// Gets a list of all format types in the database.
        /// </summary>
        /// <returns>The list of format types.</returns>
        public List<Format> GetFormats()
        {
            return new List<Format>(this.formats);
        }

        /// <summary>
        /// Gets a list of all genres in the database.
        /// </summary>
        /// <returns>The list of genres.</returns>
        public List<Genre> GetGenres()
        {
            return new List<Genre>(this.genres);
        }

        /// <summary>
        /// Gets a list of all transactions in the database.
        /// </summary>
        /// <returns>The list of transactions.</returns>
        public List<Transaction> GetTransactions()
        {
            return new List<Transaction>(this.transactions);
        }
    }
}